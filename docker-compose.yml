services:
  nginx:
    image: nginx:alpine
    container_name: tanque-cheio-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
  app:
    build: . # Constrói a imagem a partir do Dockerfile na pasta atual
    container_name: tanque-cheio-api
    restart: unless-stopped
    expose:
      - '3000' # Expõe a porta 3000 para o Nginx
    env_file:
      - .env # Carrega as variáveis de ambiente do arquivo .env
    # ports:
    #   - '${PORT}:${PORT}' # Mapeia a porta do host para a porta do contêiner
    depends_on:
      postgres:
        condition: service_healthy # Condicional para inicalizar caso Postgres estiver saudável
      redis:
        condition: service_healthy # condicional para incializar caso Redis estiver saudável

  certbot:
    image: certbot/certbot
    container_name: tanque-cheio-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    # Comando para tentar renovar o certificado a cada 12 horas
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  postgres:
    image: postgis/postgis:15-3.5-alpine
    container_name: tanque-cheio-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tanque-cheio-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
